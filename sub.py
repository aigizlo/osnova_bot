from get_conn import create_connection
from logger import logger
import mysql.connector
from datetime import datetime, timedelta


class QueryExecutionError(Exception):
    pass


def execute_query(query, params=None):
    try:
        with create_connection() as mydb:
            with mydb.cursor() as mycursor:
                if params:
                    mycursor.execute(query, params)
                else:
                    mycursor.execute(query)
                return mycursor.fetchall()
    except Exception as e:
        logger.error(f"PROCESS:execute_query, –∑–∞–ø—Ä–æ—Å {query}, {params}.  –û—à–∏–±–∫–∞ - {e}")
        raise QueryExecutionError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ : {query},Error -  {e}")


sql_check_promo_code = """
SELECT period, used, create_date FROM promo_codes 
WHERE code = %s
"""

sql_update_promo_code = """
UPDATE promo_codes
SET used = TRUE
WHERE code = %s
"""

sql_check_existing_sub = """
SELECT subscription_id FROM subscriptions 
WHERE user_id = %s AND stop_date > NOW()
"""

sql_get_subscription_id = "SELECT LAST_INSERT_ID()"

sql_get_start_date = "SELECT start_date FROM subscriptions WHERE subscription_id = %s"

sql_get_sub_info = """
SELECT stop_date, is_active
FROM subscriptions
WHERE user_id = %s
ORDER BY stop_date DESC
LIMIT 1
"""


def check_promo_code(promo_code):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    result = execute_query(sql_check_promo_code, (promo_code,))
    print(result, 'result')
    if not result:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"  # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
    period, used, create_date = result[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–µ –±–æ–ª–µ–µ 3 –¥–Ω–µ–π)
    current_date = datetime.now()
    if (current_date - create_date).days > 3:
        return False, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫"  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫
    if used == 1:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"  # –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    return True, period


sql_insert_subscription = """
INSERT INTO subscriptions (user_id, duration_months, promo_code, start_date, stop_date)
VALUES (%s, %s, %s, NOW(), %s)
"""


def activate_subscription(user_id, period, promo_code=None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    existing_sub = execute_query(sql_check_existing_sub, (user_id,))
    if existing_sub:
        return "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"

    start_date = datetime.now()
    stop_date = start_date + timedelta(days=period)

    try:
        execute_query(sql_insert_subscription, (user_id, period, promo_code, stop_date))

        if promo_code:
            print('–ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å—Ç—å, –¥–µ–ª–∞–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º –≤ –±–∞–∑–µ')
            execute_query(sql_update_promo_code, (promo_code,))
        txt = '''ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!  

üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –∫–ª—É–± "–û–°–ù–û–í–ê" '''
        return txt
    except QueryExecutionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"


def get_subscription_info(user_id):
    result = execute_query(sql_get_sub_info, (user_id,))
    if result:
        stop_date, is_active = result[0]
        current_date = datetime.now()
        if is_active == 1 and stop_date > current_date:
            return stop_date.strftime("%Y-%m-%d")
        else:
            return False
    else:
        return False


def format_date_string(date_string):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è',
        7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
    date_object = datetime.strptime(date_string, "%Y-%m-%d")
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    day = date_object.day
    month = months[date_object.month]
    year = date_object.year
    return f"{day} {month} {year} –≥–æ–¥–∞"


def my_tarif_info(date=None):
    if date:
        txt = f"""
üìö –ü—Ä–æ–¥—É–∫—Ç: "–û–°–ù–û–í–ê"

üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:
‚Äî –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {date}

üö® –û–ø–ª–∞—á–∏–≤–∞—è –∏–ª–∏ –ø—Ä–æ–¥–ª–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""
        return txt
    txt = """
üìö –ü—Ä–æ–¥—É–∫—Ç: "–û–°–ù–û–í–ê"

üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:
‚Äî –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!

‚Äî –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: 15 USD
‚Äî –ü–µ—Ä–∏–æ–¥: 30 –¥–Ω–µ–π
‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 30 –¥–Ω–µ–π

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø:

‚Äî –ö–∞–Ω–∞–ª ¬´–û–°–ù–û–í–ê¬ª
‚Äî –ß–∞—Ç ¬´–§–£–ù–î–ê–ú–ï–ù–¢–ê–õ–ò–°–¢–´¬ª

üö® –û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""

    return txt