from get_conn import create_connection
from logger import logger
import mysql.connector
from datetime import datetime, timedelta


class QueryExecutionError(Exception):
    pass


def execute_query(query, params=None):
    try:
        with create_connection() as mydb:
            with mydb.cursor() as mycursor:
                if params:
                    mycursor.execute(query, params)
                else:
                    mycursor.execute(query)
                return mycursor.fetchall()
    except Exception as e:
        logger.error(f"PROCESS:execute_query, –∑–∞–ø—Ä–æ—Å {query}, {params}.  –û—à–∏–±–∫–∞ - {e}")
        raise QueryExecutionError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ : {query},Error -  {e}")


sql_check_promo_code = """
SELECT period, used, create_date FROM promo_codes 
WHERE code = %s
"""

sql_update_promo_code = """
UPDATE promo_codes
SET used = TRUE,
user_id = %s
WHERE code = %s
"""

sql_check_existing_sub = """
SELECT subscription_id FROM subscriptions 
WHERE user_id = %s AND stop_date > NOW()
"""

sql_get_subscription_id = "SELECT LAST_INSERT_ID()"

sql_get_start_date = "SELECT start_date FROM subscriptions WHERE subscription_id = %s"

sql_get_sub_info = """
SELECT stop_date, is_active
FROM subscriptions
WHERE user_id = %s
ORDER BY stop_date DESC
LIMIT 1
"""

sql_check_promo_codes = "SELECT * FROM promo_codes WHERE code = %s"

sql_new_promo_code = """
INSERT INTO promo_codes (code, period)
VALUES (%s, %s)
"""


def check_promo_code(promo_code):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    try:
        result = execute_query(sql_check_promo_code, (promo_code,))
        if not result:
            return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"  # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        period, used, create_date = result[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–µ –±–æ–ª–µ–µ 3 –¥–Ω–µ–π)
        current_date = datetime.now()
        if (current_date - create_date).days > 3:
            return False, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫"  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫
        if used == 1:
            return False, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"  # –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        return True, period
    except Exception as e:
        logger.error(f'ERROR - check_promo_code - {promo_code}')
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"


sql_insert_subscription = """
INSERT INTO subscriptions (user_id, duration_months, start_date, stop_date)
VALUES (%s, %s, NOW(), %s)
"""

sql_renewal_subscription = """
UPDATE subscriptions
SET stop_date = DATE_ADD(stop_date, INTERVAL %s DAY)
WHERE user_id = %s
"""


# def renewal_subscription(user_id, days):
#     execute_query(sql_renewal_subscription, (days, user_id))


def activate_or_renewal_subscription(user_id, period):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    existing_sub = execute_query(sql_check_existing_sub, (user_id,))
    if existing_sub:
        execute_query(sql_renewal_subscription, (period, user_id))
        return True, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!"
        # return "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
    start_date = datetime.now()
    stop_date = start_date + timedelta(days=period)
    try:
        execute_query(sql_insert_subscription, (user_id, period, stop_date))
        return True, None
    except QueryExecutionError as e:
        logger.error(f"user_id - {user_id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False
    except Exception as e:
        logger.error(f"user_id - {user_id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


def status_used_promo_code(user_id, promo_code):
    execute_query(sql_update_promo_code, (user_id, promo_code,))


def get_subscription_info(user_id):
    result = execute_query(sql_get_sub_info, (user_id,))
    if result:
        stop_date, is_active = result[0]
        current_date = datetime.now()
        if is_active == 1 and stop_date > current_date:
            return stop_date.strftime("%Y-%m-%d")
        else:
            return False
    else:
        return False


def format_date_string(date_string):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è',
        7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
    date_object = datetime.strptime(date_string, "%Y-%m-%d")
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    day = date_object.day
    month = months[date_object.month]
    year = date_object.year
    return f"{day} {month} {year} –≥–æ–¥–∞"


def create_promo_code(code, period):
    result = execute_query(sql_check_promo_codes, (code,))
    if result:
        return False, "–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –µ—Å—Ç—å"
    execute_query(sql_new_promo_code, (code, period))
    return True, "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"


def generate_promo_code_report():
    # Retrieve all promo codes from the table
    sql_get_promo_info = "SELECT code, period, used, user_id FROM promo_codes"
    promo_codes = execute_query(sql_get_promo_info)
    # Generate the report
    report = "üìä Promo Code Report üìä\n"
    report += "-------------------------\n"
    for promo_code in promo_codes:
        used = promo_code[2]
        if used == 1:
            used = "–î–∞"
        else:
            used = "–ù–ï–¢"
        report += f"–ü–†–û–ú–û–ö–û–î: {promo_code[0]}\n–ü–ï–†–ò–û–î: {promo_code[1]} –î–Ω–µ–π\n–ò–°–ü–û–õ–¨–ó–û–í–ê–ù: {used}\nUser ID: {promo_code[3]}\n\n"

    return report
