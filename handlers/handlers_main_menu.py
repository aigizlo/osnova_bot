#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import aiogram
from aiogram import types
from aiogram.dispatcher import FSMContext
import user_data
import text
import config
import const
from datetime import datetime, timedelta
from logger import logger
from config import dp, bot
import keyboards
import sub

tarif_info = """üìö –ü—Ä–æ–¥—É–∫—Ç: "–û–°–ù–û–í–ê"

üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞

üö® –û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""


@dp.message_handler(lambda message: message.text == 'üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã', state='*')
async def my_keys_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await delete_from_channel(user_id)
    await bot.send_message(chat_id=user_id,
                           text=tarif_info,
                           parse_mode="HTML",
                           reply_markup=keyboards.keyboard_period())
    logger.info(f'user - {user_id} - –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã')


@dp.message_handler(lambda message: message.text == 'üóÉ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', state='*')
async def my_keys_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    stop_date = sub.get_subscription_info(user_id)
    await delete_from_channel(user_id)
    if stop_date:
        date_farmated = sub.format_date_string(stop_date)
        txt_my_tarif_info = text.my_tarif_info(date_farmated)
        await bot.send_message(chat_id=user_id,
                               text=txt_my_tarif_info,
                               parse_mode="HTML",
                               reply_markup=keyboards.renewal_sub())
        logger.info(f'user - {user_id} - –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ (–¥–æ {stop_date})')
    else:
        txt_my_tarif_info = text.my_tarif_info(stop_date)
        await bot.send_message(chat_id=user_id,
                               text=txt_my_tarif_info,
                               parse_mode="HTML",
                               reply_markup=keyboards.keyboard_period())
        logger.info(f'user - {user_id} - –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ (–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)')


@dp.message_handler(lambda message: message.text == 'ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞', state='*')
async def my_keys_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await delete_from_channel(user_id)
    answer = f'''ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞

    –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {config.support}'''

    await bot.send_message(chat_id=user_id,
                           text=answer,
                           parse_mode='HTML')
    logger.info(f'user_id - {user_id} - –ü–æ–¥–¥–µ—Ä–∂–∫–∞')


@dp.message_handler(lambda message: message.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', state='*')
async def my_keys_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await delete_from_channel(user_id)
    count_referrals = user_data.count_referrals(user_id)
    if not count_referrals:
        count_referrals = 0
    user_balance = user_data.get_user_balance_bonus(user_id)
    sub_info = sub.get_subscription_info(user_id)
    if not sub_info:
        txt = text.not_ref_link(count_referrals, user_balance)
        await bot.send_message(chat_id=user_id,
                               text=txt,
                               parse_mode='HTML')
        logger.info(f'user_id - {user_id} - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
        return
    txt = text.ref_link(user_id, const.bot_name, count_referrals, user_balance)
    await bot.send_message(chat_id=user_id,
                           text=txt,
                           parse_mode='HTML')
    logger.info(f'user_id - {user_id} - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')


@dp.message_handler(lambda message: message.text == '–û—Ç–∑—ã–≤—ã', state='*')
async def my_keys_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await delete_from_channel(user_id)
    txt = f'–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–∑—ã–≤–∞–º - https://t.me/osnova_feedbackk'
    await bot.send_message(chat_id=user_id,
                           text=txt,
                           parse_mode='HTML')
    logger.info(f'user_id - {user_id} - –û—Ç–∑—ã–≤—ã')


@dp.message_handler(commands=['menu'], state="*")
async def main_menu(message: types.Message):
    user_id = message.from_user.id
    await bot.send_message(chat_id=user_id,
                           text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                           parse_mode="HTML",
                           reply_markup=keyboards.main_menu())


# async def delete_from_channel(user_id):
#     sub_info = sub.get_subscription_info(user_id)
#     if not sub_info:
#         try:
#             await bot.ban_chat_member(chat_id=const.channel_id, user_id=user_id)
#             logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {const.channel_id}')
#         except Exception as e:
#             logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
#
#         try:
#             await bot.ban_chat_member(chat_id=const.chat_id, user_id=user_id)
#             logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ {const.channel_id}')
#         except Exception as e:
#             logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
from aiogram.utils.exceptions import MigrateToChat, BadRequest, ChatNotFound

async def delete_from_channel(user_id):
    sub_info = sub.get_subscription_info(user_id)
    if not sub_info:
        async def try_ban(chat_id, user_id, chat_type):
            try:
                await bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ {chat_type} {chat_id}')
            except MigrateToChat as e:
                new_chat_id = e.migrate_to_chat_id
                logger.info(f"{chat_type.capitalize()} –±—ã–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É. –ù–æ–≤—ã–π ID: {new_chat_id}")
                await try_ban(new_chat_id, user_id, chat_type)
            except BadRequest as e:
                if "user is an administrator" in str(e).lower():
                    logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ {chat_type} {chat_id}")
                else:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ {chat_type}: {e}')
            except ChatNotFound:
                logger.error(f"{chat_type.capitalize()} {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                logger.error(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ {chat_type}: {e}')

        # –ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ
        await try_ban(const.channel_id, user_id, "–∫–∞–Ω–∞–ª–∞")

        # –ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ —á–∞—Ç–µ
        await try_ban(const.chat_id, user_id, "—á–∞—Ç–∞")