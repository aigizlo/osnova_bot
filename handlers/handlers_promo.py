import asyncio

import aiogram
from aiogram import types
from aiogram.dispatcher import FSMContext
from logger import logger
import sub
import text
from config import support, dp, bot, file_ids
import keyboards.keyboards
from states import MyStates



@dp.callback_query_handler(lambda c: c.data and c.data.startswith('apply_promo'), state=MyStates.go_to_pay)
async def select_promo_code(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id
    user_data_state = await state.get_data()
    month = user_data_state.get('month')
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    answer = f"""üìö –ü—Ä–æ–¥—É–∫—Ç: "–û–°–ù–û–í–ê"
    
    –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:"""

    await bot.send_message(chat_id=telegram_id, text=answer, reply_markup=keyboards.keyboards.back_to_main_menu())
    await state.set_state(MyStates.insert_promo_code)


# —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
@dp.message_handler(state=MyStates.insert_promo_code)
async def process_key_name(message: types.Message, state: FSMContext):
    telegram_id = message.chat.id
    promo_code = message.text
    print(promo_code)
    user_data_state = await state.get_data()
    is_promo_valid, promo_period = sub.check_promo_code(promo_code)
    if is_promo_valid:
        sub_active = sub.activate_subscription(telegram_id, promo_period, promo_code)
        await message.answer(sub_active)
        await asyncio.sleep(1)
        await bot.send_message(telegram_id, text.text_buy_tarif)
        logger.info(sub_active)
        await state.finish()
        return
    await message.answer(promo_period, parse_mode='HTML', reply_markup=keyboards.keyboards.back_to_main_menu())
    await state.finish()
    logger.info(promo_period)


# @dp.message_handler(state=MyStates.state_key_name)
# async def process_key_name(message: types.Message, state: FSMContext):
#     # —ç—Ç–æ –∫–ª–∞—Å—Å, –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
#     # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤—Ä–∞ —é–∑–µ—Ä–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
#     key_name = message.text
#     user_info = user_data.get_userid_firsname_nickname(message.from_user.id)
#     # –∏—â–µ–º –µ–≥–æ user_id
#     try:
#         user_id = user_info[0]
#         # –∑–¥–µ—Å—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#         user_data_state = await state.get_data()
#         amount = user_data_state["amount"]
#         # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤ –º–µ–Ω—é –µ—Å–ª –Ω–∞–∂–∞–ª–∏ –ù–ê–ó–ê–î
#         if message.text == 'üîô–ù–∞–∑–∞–¥':
#             keyboard = main_menu()
#             await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:/n" + instruction, parse_mode="HTML", reply_markup=keyboard)
#             await state.finish()
#             return
#         # –µ—Å–ª–∏ –∏–º—è –¥–ª–∏–Ω–Ω–æ–µ - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
#         if len(key_name) > 35:
#             await message.answer(ask_server_name_2)
#             return
#         # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞
#         if check_names(user_id, key_name):
#             await message.answer(ask_server_name_3)
#             return
#         # –∏—Å–∫–ª—é—á–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
#         if not re.match(allowed_characters_pattern, key_name):
#             await message.answer(ask_server_name_4)
#             return
#         # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏—Ö –¥–∞–ª—å—à–µ
#         await state.update_data(key_name=key_name, action="pay")
#
#         # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É
#         answer = payment_amount_prompt(amount)
#
#         # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
#         pay_keyboard = get_pay_method_keyboard()
#
#         await message.answer(answer, parse_mode='HTML', reply_markup=pay_keyboard)
#         # –æ—Ç–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è pay_from_balance
#         await state.set_state(MyStates.pay_from_balance)
#
#         logger.info(f"–£–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º—è –∫–ª—é—á–∞, user - {user_info}, –∏–º—è –∫–ª—é—á–∞ - {key_name}")
#     except Exception as e:
#         logger.info(f"ERROR:–£–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º—è –∫–ª—é—á–∞, user - {user_info},–æ—à–∏–±–∫–∞ - {e}")
#         await message.answer(answer_error, reply_markup=main_menu())