from aiogram import types
from aiogram.utils.exceptions import TelegramAPIError
import text
from config import dp, bot, err_send, secret_key, tg_channel, file_ids, admin, one_month_sale, three_month_sale
import keyboards.keyboards
from main import process_start_command
from states import MyStates

import aiogram
from aiogram.dispatcher import FSMContext
from logger import logger

from config import support, dp, bot, file_ids

video_id = None

prices = {
    "1": 15,
    "3": 40,
    "12": 150,
}

get_days = {
    1: 30,
    3: 90,
    12: 365,
}


def tarrif_info(month, price, days):
    tarrif_info = f'''
    üìö –ü—Ä–æ–¥—É–∫—Ç: "–û–°–ù–û–í–ê"
    
    üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω {month} –º–µ—Å—è—Ü
    
    - –¶–µ–Ω–∞: {price} USD
    - –ü–µ—Ä–∏–æ–¥ {days} –¥–Ω–µ–π'''
    return tarrif_info


def tarrif_info_2(month, price, days):
    txt = f'''
    üìö –ü—Ä–æ–¥—É–∫—Ç: "–û–°–ù–û–í–ê"
    
    üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {month} –º–µ—Å—è—Ü
    
    ‚Äî –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} USD
    ‚Äî –ü–µ—Ä–∏–æ–¥: 30 –¥–Ω–µ–π
    ‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ {days} –¥–Ω–µ–π
    
    –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø:
    
    ‚Äî –ö–∞–Ω–∞–ª ¬´–û–°–ù–û–í–ê¬ª
    ‚Äî –ß–∞—Ç ¬´–§–£–ù–î–ê–ú–ï–ù–¢–ê–õ–ò–°–¢–´¬ª
    
    üö® –û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
    '''
    return txt


@dp.callback_query_handler(lambda c: c.data.startswith("period:"), state='*')
async def select_period(callback_query: types.CallbackQuery, state: FSMContext):
    user_data_state = await state.get_data()

    try:
        month = int(callback_query.data.split(':')[1])  # –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü
    except:
        month = user_data_state['month']

    user_id = callback_query.message.chat.id

    price = prices.get(str(month))  # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
    days = get_days.get(month)  # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–ª—é—á

    txt_tarrif_info = tarrif_info(month, price, days)
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")
    logger.info(f" - {user_id}")

    await state.set_state(MyStates.go_to_pay)
    await state.update_data(month=month, price=price, days=days)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id=user_id,
                           text=txt_tarrif_info,
                           parse_mode="HTML",
                           # –û–ø–ª–∞—Ç–∏—Ç—å
                           # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
                           # –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                           # –ù–∞–∑–∞–¥
                           reply_markup=keyboards.keyboards.select_pay_method())


@dp.callback_query_handler(lambda c: c.data.startswith("go_pay"), state=MyStates.go_to_pay)
async def go_to_pay(callback_query: types.CallbackQuery, state: FSMContext):
    user_data_state = await state.get_data()

    month = user_data_state['month']
    print(month, ' month')
    user_id = callback_query.message.chat.id

    price = prices.get(str(month))  # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
    days = get_days.get(month)  # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–ª—é—á

    txt_tarrif_info = tarrif_info_2(month, price, days)
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id=user_id,
                           text=txt_tarrif_info,
                           parse_mode="HTML",
                           # –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
                           # –ù–∞–∑–∞–¥
                           reply_markup=keyboards.keyboards.go_pay())


@dp.callback_query_handler(lambda c: c.data.startswith("select_pay_method"), state=MyStates.go_to_pay)
async def selected_pay_method(callback_query: types.CallbackQuery, state: FSMContext):
    user_data_state = await state.get_data()

    month = user_data_state['month']
    user_id = callback_query.message.chat.id

    price = user_data_state['price'] # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
    days = user_data_state['days']  # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–ª—é—á

    print(user_data_state)

    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id=user_id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                           parse_mode="HTML",
                           # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
                           # –û–ø–ª–∞—Ç–∞ USTD
                           reply_markup=keyboards.keyboards.select_card_or_usdt())









@dp.callback_query_handler(text="go_back", state="*")
async def go_back_(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    print(f"Current state before going back: {current_state}")
    await select_period(callback_query, state)


@dp.callback_query_handler(text="go_back_to_main", state="*")
async def go_back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    user_data_state = await state.get_data()
    month = user_data_state.get('month')
    price = user_data_state.get('price')
    days = user_data_state.get('days')
    txt_tarrif_info = tarrif_info(month, price, days)
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text=txt_tarrif_info,
                           parse_mode="HTML",
                           reply_markup=keyboards.keyboards.keyboard_period())
    # await state.set_state(MyStates.select_period)

