from aiogram import types
from aiogram.utils.exceptions import TelegramAPIError
import text
import keyboards
import user_data
from balance import add_withdrawal_request
from states import MyStates
from config import bot, dp
import aiogram
from aiogram.dispatcher import FSMContext
from logger import logger
import config
import const


@dp.callback_query_handler(lambda c: c.data.startswith("period:"), state='*')
async def select_period(callback_query: types.CallbackQuery, state: FSMContext):
    user_data_state = await state.get_data()
    user_id = callback_query.message.chat.id

    try:
        month = int(callback_query.data.split(':')[1])  # –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü
    except:
        month = user_data_state['month']
    price = config.prices.get(str(month))  # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
    days = config.get_days.get(month)  # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–ª—é—á

    txt_tarrif_info = text.tarrif_info(month, price, days)
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")
    logger.info(f" - {user_id}")

    await state.set_state(MyStates.go_to_pay)
    await state.update_data(month=month, price=price, days=days)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id=user_id,
                           text=txt_tarrif_info,
                           parse_mode="HTML",
                           # –û–ø–ª–∞—Ç–∏—Ç—å
                           # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
                           # –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                           # –ù–∞–∑–∞–¥
                           reply_markup=keyboards.select_pay_method())
    logger.info(f'user_id - {user_id}, period - {month} –º–µ—Å—è—Ü')


@dp.callback_query_handler(lambda c: c.data.startswith("go_pay"), state=MyStates.go_to_pay)
async def select_go_to_pay(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.message.chat.id
    user_data_state = await state.get_data()
    # üí≥ –û–ø–ª–∞—Ç–∏—Ç—å
    month = user_data_state['month']
    price = config.prices.get(str(month))  # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
    days = config.get_days.get(month)  # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–ª—é—á

    txt_tarrif_info = text.tarrif_info_2(month, price, days)
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id=user_id,
                           text=txt_tarrif_info,
                           parse_mode="HTML",
                           # –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
                           # –ù–∞–∑–∞–¥
                           reply_markup=keyboards.go_to_pay())
    logger.info(f'user_id {user_id} - üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {month} –º–µ—Å—è—Ü–µ–≤')


@dp.callback_query_handler(lambda c: c.data.startswith("select_pay_method"), state=MyStates.go_to_pay)
async def select_pay_method(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
    user_data_state = await state.get_data()
    month = user_data_state['month']
    user_id = callback_query.message.chat.id
    price = user_data_state['price']  # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
    days = user_data_state['days']  # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–ª—é—á
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id=user_id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                           parse_mode="HTML",
                           # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
                           # –û–ø–ª–∞—Ç–∞ USTD
                           reply_markup=keyboards.select_card_or_usdt())

    logger.info(f'user_id {user_id} - –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ {month} –º–µ—Å—è—Ü–µ–≤ {days} - –¥–Ω–µ–π {price} —Ü–µ–Ω–∞')


@dp.callback_query_handler(text="go_back", state="*")
async def select_go_back_(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    await select_period(callback_query, state)


@dp.callback_query_handler(text="go_back_to_main", state="*")
async def select_go_back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    user_data_state = await state.get_data()
    user_id = callback_query.message.chat.id
    month = user_data_state.get('month')
    price = user_data_state.get('price')
    days = user_data_state.get('days')
    txt_tarrif_info = text.tarrif_info(month, price, days)
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text=txt_tarrif_info,
                           parse_mode="HTML",
                           # 1 –º–µ—Å—è—Ü - 30 –¥–Ω–µ–π - 15 USD
                           # 3 –º–µ—Å—è—Ü - 90 –¥–Ω–µ–π - 40 USD
                           # 12 –º–µ—Å—è—Ü - 365 –¥–Ω–µ–π - 150 USD
                           reply_markup=keyboards.keyboard_period())
    logger.info(f'user_id - {user_id} –í—ã—à–µ–ª –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤ –º–µ–Ω—é')


@dp.callback_query_handler(text="accept_rules", state="*")
async def select_go_back_(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.message.chat.id
    # –ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞
    await bot.send_message(chat_id=user_id,
                           text="–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª",
                           parse_mode="HTML",
                           # –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                           # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                           reply_markup=keyboards.subscribe())

    logger.info(f'user_id - {user_id} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')


@dp.callback_query_handler(lambda c: c.data == "subscribe_check", state="*")
async def select_subscribe_no_thanks(callback_query: types.CallbackQuery):
    user_id = callback_query.message.chat.id
    chat_member = await bot.get_chat_member(chat_id=const.channel_id,
                                            user_id=user_id)
    logger.info(f"BUTTON:subscribe_check user - {user_id}")
    if chat_member.status in ["member", "administrator", "creator", "owner"]:
        await bot.send_message(chat_id=user_id,
                               text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞\n"
                                    "–í—Å—Ç—É–ø–∞–π –≤ –Ω–∞—à —á–∞—Ç",
                               reply_markup=keyboards.join_chat(),
                               # –ß–∞—Ç ¬´–§–£–ù–î–ê–ú–ï–ù–¢–ê–õ–ò–°–¢–´ - –≤—Å—Ç—É–ø–∏—Ç—å
                               parse_mode="HTML")
        logger.info(f"""user_id - {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª""")

        try:
            if callback_query.message.message_id:
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
        except aiogram.utils.exceptions.MessageCantBeDeleted:
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    else:
        await bot.send_message(chat_id=user_id,
                               text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞\n"
                                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª",
                               reply_markup=keyboards.subscribe(),
                               # –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
                               # –ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
                               parse_mode="HTML")
        logger.info(f"""user_id - {user_id} –ù–ï –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª""")
        try:
            if callback_query.message.message_id:
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
        except aiogram.utils.exceptions.MessageCantBeDeleted:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")


@dp.callback_query_handler(text="renewal_sub", state="*")
async def select_renewal_sub(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.message.chat.id
    # –ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞
    await bot.send_message(chat_id=user_id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è",
                           parse_mode="HTML",
                           # 1 –º–µ—Å—è—Ü - 30 –¥–Ω–µ–π - 15 USD
                           # 3 –º–µ—Å—è—Ü - 90 –¥–Ω–µ–π - 40 USD
                           # 12 –º–µ—Å—è—Ü - 365 –¥–Ω–µ–π - 150 USD
                           reply_markup=keyboards.keyboard_period())
    logger.info(f'user_id - {user_id} –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')



@dp.callback_query_handler(text="withdraw_money", state="*")
async def request_wallet(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    data = user_data.get_status_withdraw(user_id)
    if data:
        data = data[0]
        logger.info(f'{data}')
        if data[3] == "pending":
            await bot.send_message(user_id,
                                   "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è")
            await bot.send_message(user_id,
                                   f"–ö–æ—à–µ–ª–µ–∫ - {data[4]}\n"
                                   f"–°—É–º–º–∞ - {data[2]}",
                                   reply_markup=keyboards.cansel_withdraw())
            return
    await bot.send_message(user_id,
                           "‚ÄºÔ∏è–ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–µ—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, —Å—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ "
                           "–≤–æ–∑–≤—Ä–∞—Ç–∞.‚ÄºÔ∏è\n\n "
                           "üëáüëáüëá–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ TRC20 USDT.üëáüëáüëá",
                           reply_markup=keyboards.cansel_withdraw_requests())
    await state.set_state(MyStates.waiting_for_wallet)

    logger.info(f'user_id - {user_id} requested to withdraw money')


@dp.message_handler(state=MyStates.waiting_for_wallet)
async def process_wallet(message: types.Message, state: FSMContext):
    wallet = message.text.strip()
    user_id = message.from_user.id
    balance = user_data.get_user_balance_bonus(user_id)

    if len(wallet) == 34 and wallet.startswith('T'):
        # –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É

        add_withdrawal_request(user_id, float(balance), wallet)

        await bot.send_message(const.admin, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {balance}$\n"
                                             f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–µ—à–∏—Ç–µ –∑–∞—è–≤–∫—É —Ç—É—Ç {const.link_stat}withdraw ", parse_mode="HTML")
        await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø—Ä–∏–Ω—è—Ç. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3-5 "
                            "—Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.")
        await state.finish()
        logger.info(f'user_id - {message.from_user.id} provided valid wallet: {wallet}')
    else:
        # –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É
        await message.reply("–û—à–∏–±–∫–∞! –ö–æ—à–µ–ª–µ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã 'T' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 34 —Å–∏–º–≤–æ–ª–∞.\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ TRC20 USDT.", reply_markup=keyboards.cansel_withdraw_requests())
        logger.warning(f'user_id - {message.from_user.id} provided invalid wallet: {wallet}')


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
@dp.callback_query_handler(text="cancel", state=MyStates.waiting_for_wallet)
async def cancel_wallet_input(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
    await state.finish()

    logger.info(f'user_id - {user_id} cancelled wallet input')



@dp.callback_query_handler(text="withdraw_cancel", state="*")
async def select_go_back_(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_data.delete_withdraw_request(user_id)
    await bot.send_message(user_id,
                           "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É–¥–∞–ª–µ–Ω–∞")



