# -*- coding: utf-8 -*-
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
import user_data
from aiogram import types
# from keyboards.admin_buutons import *
from keyboards import *
from config import dp, bot
from admin_butons import *
from states import GetuserInfo


@dp.message_handler(commands=['send_all'], state="*")
async def show_rassilka(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:', reply_markup=ReplyKeyboardRemove())
    await GetuserInfo.get_users.set()


@dp.message_handler(state=GetuserInfo.get_users)
async def select_users_(message: types.Message, state: FSMContext):
    textpost = message.text
    await state.update_data(textpost=textpost)
    await GetuserInfo.select_users.set()
    await message.answer('–ö–æ–º—É –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É?', reply_markup=select_users)


@dp.message_handler(state=GetuserInfo.select_users, text=['–í—Å–µ–º', '–° –ø–æ–¥–ø–∏—Å–∫–æ–π', '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏'])
async def get_users_for_send(message: types.Message, state: FSMContext):
    selected_option = message.text
    print(selected_option, ' selected_option')
    await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_option}, –Ω–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ', reply_markup=dalee)

    await state.update_data(selected_option=selected_option)
    await GetuserInfo.text.set()


@dp.message_handler(state=GetuserInfo.text, text='–î–∞–ª–µ–µ')
async def get_posttext(message: types.Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ :', reply_markup=adminpanelmenu)
    await GetuserInfo.next_stage.set()


@dp.message_handler(state=GetuserInfo.next_stage, text='–° —Ñ–æ—Ç–æ üèû')
async def get_photo(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ üèû :')
    await GetuserInfo.get_img.set()


@dp.message_handler(state=GetuserInfo.next_stage, text='–° –≤–∏–¥–µ–æ üé•')
async def get_video(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ :')
    await GetuserInfo.get_video.set()


@dp.message_handler(state=GetuserInfo.get_img, content_types=types.ContentType.PHOTO)
async def get_photo_id(message: types.Message, state: FSMContext):
    fileid = message.photo[0].file_id
    await state.update_data(photoid=fileid)
    await GetuserInfo.finishpost.set()
    await message.answer('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', reply_markup=adminpanelcontinue)


@dp.message_handler(state=GetuserInfo.get_video, content_types=types.ContentType.VIDEO)
async def get_video_id(message: types.Message, state: FSMContext):
    if message.video:
        fileid = message.video.file_id
        await state.update_data(video_id=fileid)
        await GetuserInfo.finishpost.set()
        await message.answer('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', reply_markup=adminpanelcontinue)
    else:
        await message.answer('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


@dp.message_handler(state=GetuserInfo.next_stage, text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è')
@dp.message_handler(state=GetuserInfo.finishpost)
async def get_testpost(message: types.Message, state: FSMContext):
    data = await state.get_data()
    post_text = data.get('textpost')
    photoid = data.get('photoid')
    video_id = data.get('video_id')
    # keyboard = data.get('keyboard')
    user = message.from_user.id
    try:
        if photoid:
            await bot.send_photo(user, photo=photoid, caption=post_text,
                                 parse_mode='HTML', reply_markup=startposting)
        elif video_id:
            await bot.send_video(user, video=video_id, caption=post_text,
                                 parse_mode='HTML', reply_markup=startposting)

        else:
            await bot.send_message(user, disable_web_page_preview=True, text=post_text, parse_mode='HTML',
                                   reply_markup=startposting)
        await GetuserInfo.publish.set()
    except Exception as e:
        print(e)
        await bot.send_message(user,
                               text=f'–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ç–µ–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã '
                                    f'–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n –ù–∞—á–Ω–∏—Ç–µ –≤—Å—ë –∑–∞–Ω–æ–≤–æ : /send_all')
        await state.finish()
        await state.reset_data()


@dp.callback_query_handler(state=GetuserInfo.publish, text='startposting')
async def sendposts(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    post_text = data.get('textpost')
    photoid = data.get('photoid')
    video_id = data.get('video_id')
    keyboard = data.get('keyboard')
    selected_users = data.get('selected_option')
    senpostcol = 0

    if selected_users == "–í—Å–µ–º":
        user_ids = user_data.get_all_users()
    if selected_users == "–° –ø–æ–¥–ø–∏—Å–∫–æ–π":
        user_ids = user_data.get_user_id_have_sub()
    if selected_users == "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏":
        user_ids = user_data.get_user_id_have_not_sub()

    user_ids = [user_id[0] for user_id in user_ids]
    for user in user_ids:
        post_text = post_text.format_map({
        })
        try:
            if photoid:
                await bot.send_photo(user, photo=photoid, caption=post_text,
                                     parse_mode='HTML')
            elif video_id:
                await bot.send_video(user, video=video_id, caption=post_text,
                                     parse_mode='HTML')
            else:
                await bot.send_message(user, disable_web_page_preview=True, text=post_text, parse_mode='HTML',
                                       reply_markup=keyboard)
            senpostcol += 1
        except:
            pass
    await call.message.answer(f'‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {senpostcol} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º \n', reply_markup=main_menu())
    await state.finish()
    await state.reset_data()


@dp.callback_query_handler(state=GetuserInfo.publish, text='cancelposting')
async def cancel_post(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(f'‚úÖ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n –ù–∞—á–Ω–∏—Ç–µ –≤—Å—ë –∑–∞–Ω–æ–≤–æ : /send_all', reply_markup=main_menu())
    await state.finish()
    await state.reset_data()
